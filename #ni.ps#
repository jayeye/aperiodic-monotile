{
    dup 1 eq {
        pop
        /tile-H-1 {
            gsave metatile-H-encloser-points 0 get aload pop translate 0 0 moveto
            gsave strkk sky hat-flipped -120 rotate hpath grestore
            gsave strkk azure hat-upright one half add sq32 translate -60 rotate hpath grestore
            gsave strkk sky hat-flipped one 3 mul 0 translate -120 vrotate hpath grestore
            gsave strkk sky hat-flipped 3 one mul sq3 dup add translate 120 vrotate hpath grestore
            draw-enclosers-p {metatile-H-encloser} if grestore
        } def
        /tile-H-encloser-points-1 {
            [ [ 0 0 ] [ half sq32 neg ] [ one 4.5 mul sq32 neg ] [ one 5 mul 0 ] [ one 3 mul sq3 dup add ] [ one dup add sq3 dup add ] ]
        } def
        /tile-H-encloser-1 {
            strk {} metatile-H-encloser-points gsave dup 0 get aload pop translate 0 0 moveto hpath draw-arrows-p {metatile-H-arrow} if grestore
        } def
        /tile-T-1 {
            gsave metatile-T-encloser-points 0 get aload pop translate 0 0 moveto gsave strkk white hat-flipped one dup add 0 translate hpath grestore draw-enclosers-p {metatile-T-encloser} if grestore
        } def
        /tile-T-encloser-points-1 {
            [ [ 0 0 ] [ one 3 mul 0 ] [ one half add sq3 1.5 mul ] ]
        } def
        /tile-T-encloser-1 {
            strk {} metatile-T-encloser-points gsave dup 0 get aload pop translate 0 0 moveto hpath draw-arrows-p {metatile-T-arrow} if grestore
        } def
        /tile-F-1 {
            /F metatile-FP draw-enclosers-p {metatile-F-encloser} if
        } def
        /tile-F-encloser-points-1 {[ [ 0 0 ] [ one 3 mul 0 ] [ one 3.5 mul sq32 ] [ one 3 mul sq3 ] [ one neg sq3 ] ]} def /tile-F-encloser-1 {strk {} metatile-F-encloser-points gsave dup 0 get aload pop translate 0 0 moveto hpath grestore} def /tile-P-1 {/P metatile-FP draw-enclosers-p {metatile-P-encloser} if} def /tile-P-encloser-points-1 {[ [ 0 0 ] [ one 4 mul 0 ] [ one 3 mul sq3 ] [ one neg sq3 ] ]} def
        /tile-P-encloser-1 {strk {} metatile-P-encloser-points gsave dup 0 get aload pop translate 0 0 moveto hpath draw-arrows-p {metatile-P-arrow} if grestore} def} {dup /next-level exch def 1 sub /this-level exch def /H {(tile-H-) this-level mksym load exec} def /T {(tile-T-) this-level mksym load exec} def /P {(tile-P-) this-level mksym load exec} def /F {(tile-F-) this-level mksym load exec} def /HE {(tile-H-encloser-) this-level mksym load exec} def /TE {(tile-T-encloser-) this-level mksym load exec} def /PE {(tile-P-encloser-) this-level mksym load exec} def /FE {(tile-F-encloser-) this-level mksym load exec} def /HEP {(tile-H-encloser-points-) this-level mksym load exec} def /TEP {(tile-T-encloser-points-) this-level mksym load exec} def /PEP {(tile-P-encloser-points-) this-level mksym load exec} def /FEP {(tile-F-encloser-points-) this-level mksym load exec} def /nexttile-H {(tile-H-) next-level mksym} def /nexttile-T {(tile-T-) next-level mksym} def /nexttile-P {(tile-P-) next-level mksym} def /nexttile-F {(tile-F-) next-level mksym} def /nexttile-H-encloser {(tile-H-encloser-) next-level mksym} def /nexttile-T-encloser {(tile-T-encloser-) next-level mksym} def /nexttile-P-encloser {(tile-P-encloser-) next-level mksym} def /nexttile-F-encloser {(tile-F-encloser-) next-level mksym} def /nexttile-H-encloser-points {(tile-H-encloser-points-) next-level mksym} def /nexttile-T-encloser-points {(tile-T-encloser-points-) next-level mksym} def /nexttile-P-encloser-points {(tile-P-encloser-points-) next-level mksym} def /nexttile-F-encloser-points {(tile-F-encloser-points-) next-level mksym} def nexttile-H {gsave HEP exec 0 get aload pop translate H grestore gsave HEP dup 0 get exch dup 2 get exch 0 get vsub vadd aload pop translate H grestore gsave HEP dup 0 get exch dup 4 get exch 0 get vsub dup vadd vadd aload pop translate -120 rotate H grestore gsave HEP dup dup 2 get exch 0 get vsub exch dup 4 get exch HE 0 get vsub vadd FEP dup 2 get exch 1 get vsub 120 vrot vadd aload pop translate 180 rotate T grestore gsave 3 {HEP dup 2 get exch 0 get vsub aload pop translate gsave HEP dup 2 get exch 0 get vsub PEP dup 0 get exch 2 get vsub vadd aload pop translate F grestore HEP dup 2 get exch 0 get vsub HEP dup 4 get exch 2 get vsub dup vadd vadd aload pop translate -120 rotate} repeat grestore gsave 2 {HEP dup 2 get exch 0 get vsub aload pop translate gsave PEP dup 0 get exch 2 get vsub aload pop translate P grestore HEP dup 2 get exch 0 get vsub HEP dup 4 get exch 2 get vsub dup vadd vadd aload pop translate -120 rotate} repeat HEP dup 2 get exch 0 get vsub aload pop translate gsave 180 rotate P grestore grestore} def nexttile-H-encloser-points HEP 0 get FEP dup 2 get exch 1 get vsub 120 vrot vadd dup HEP dup 0 get exch dup 2 get exch 0 get vsub dup vadd vadd FEP dup 2 get exch 1 get vsub -120 vrot vadd dup 1 index 4 index vsub 60 vrot 4 index vadd dup 6 array astore def nexttile-H-encloser {sstrk {} nexttile-H-encloser-points load hpath epts {nexttile-H-encloser-points load dup dup 0 get te 2 get te 4 get te} if} def nexttile-F {gsave FEP dup 0 get exch 2 get vsub -60 vrot aload pop translate -60 rotate F grestore gsave FEP dup 3 get exch 2 get vsub -60 vrot aload pop translate 60 rotate H grestore gsave FEP dup 3 get exch 2 get vsub -60 vrot HEP dup 4 get exch 0 get vsub vadd PEP dup 0 get exch 2 get vsub 60 vrot vadd dup aload pop translate 60 rotate P grestore gsave HEP dup 2 get exch 0 get vsub vadd dup aload pop translate 120 rotate H grestore gsave dup FEP dup 0 get exch 3 get vsub vadd aload pop translate F grestore gsave HEP dup 2 get exch 0 get vsub 120 vrot vadd FEP dup 0 get exch 3 get vsub 120 vrot vadd aload pop translate 120 rotate F grestore} def nexttile-P {gsave FEP dup 0 get exch 2 get vsub -60 vrot aload pop translate -60 rotate F grestore gsave FEP dup 3 get exch 2 get vsub -60 vrot aload pop translate 60 rotate H grestore gsave FEP dup 3 get exch 2 get vsub -60 vrot HEP dup 4 get exch 0 get vsub vadd PEP dup 0 get exch 2 get vsub 60 vrot vadd dup aload pop translate 60 rotate P grestore gsave HEP dup 2 get exch 0 get vsub vadd dup aload pop translate 120 rotate H grestore gsave HEP dup 2 get exch 0 get vsub 120 vrot vadd FEP dup 0 get exch 3 get vsub 120 vrot vadd aload pop translate 120 rotate F grestore} def nexttile-F-encloser-points [ 0 0 ] dup FEP dup 3 get exch 2 get vsub -60 vrot vadd HEP dup 1 get exch 0 get vsub 60 vrot vadd PEP dup 0 get exch 3 get vsub 60 vrot vadd HEP dup 2 get exch 0 get vsub vadd FEP dup 2 get exch 3 get vsub vadd dup FEP dup 0 get exch 2 get vsub -120 vrot vadd dup FEP dup 2 get exch 0 get vsub 120 vrot vadd nexttile-H-encloser-points load 2 get dup 5 index 5 index vsub dup vadd vadd nexttile-H-encloser-points load 0 get nexttile-H-encloser-points load 2 get 7 index 5 index vsub vadd vintersect 4 index 2 index vsub nexttile-H-encloser-points load 2 get vadd vsub 5 array astore def nexttile-F-encloser {sstrk {} nexttile-F-encloser-points load hpath epts {nexttile-F-encloser-points load dup dup 0 get te 1 get te 3 get te} if} def nexttile-P-encloser-points nexttile-F-encloser-points load aload pop 1 index 1 index vsub 5 index vadd 5 1 roll 4 -1 roll pop 3 -1 roll pop 4 array astore def nexttile-P-encloser {sstrk {} nexttile-P-encloser-points load hpath epts {nexttile-P-encloser-points load dup 0 get te 2 get te} if} def nexttile-T-encloser-points {nexttile-H-encloser-points load dup 4 get exch dup 1 get exch 0 get vsub vadd nexttile-H-encloser-points load 3 get 1 index vsub 60 vrot 1 index vadd dup 2 index vsub 60 vrot 2 index vadd 2 index vsub 3 1 roll exch vsub exch [ 0 0 ] 3 1 roll 3 array astore} def nexttile-T {gsave nexttile-T-encloser-points load aload pop vadd vadd 1 3 div vmul HE 0 get HE 2 get HE 4 get vadd vadd 1 3 div vmul vsub aload pop translate H grestore} def nexttile-T-encloser {sstrk {} nexttile-T-encloser-points load hpath} def nexttile-H-encloser-points load dup dup 2 get nexttile-P-encloser-points load dup 3 get exch 2 get vsub vadd 1 exch put dup dup dup dup 1 get exch 0 get vsub 120 vrot exch 2 get vadd 3 exch put dup dup dup 1 get exch 0 get vsub 240 vrot exch 4 get vadd 5 exch put} ifelse}
