%!

/scalefactor 60 def
200 400 translate
scalefactor dup scale

/Helvetica findfont 18 scalefactor div scalefont setfont


/strk {
    { 1 setlinejoin .05 setlinewidth stroke }
} def

/strkr {
    { 1 setlinejoin .025 setlinewidth 1 0 0 setrgbcolor stroke }
} def

/strkg {
    { 1 setlinejoin .025 setlinewidth 0 1 0 setrgbcolor stroke }
} def
/strkb {
    { 1 setlinejoin .025 setlinewidth 0 0 1 setrgbcolor stroke }
} def

/sky {
    { .6 .8 .9 setrgbcolor fill }
} def

/azure {
    { 0 .55 .9 setrgbcolor fill }
} def

/grey {
    { .75 setgray fill }
} def

/white {
    { 1 setgray fill }
} def


/vadd {                 % [x1 y1] [x2 y2] >>> [x1+x2 y1+y2]
    aload pop           % [x1 y1] x2 y2
    3 -1 roll           % x2 y2 [x1 y1]
    aload pop           % x2 y2 x1 y1
    3 -1 roll           % x2 x1 y1 y2
    add                 % x2 x1 y1+y2
    3 1 roll            % y1+y2 x2 x1
    add                 % y1+y2 x2+x1
    exch                % x2+x1 y1+y2
    2 array astore      % [x1+x2 y1+y2]
} def

/vneg {                 % [x y] >>> [-x -y]
    aload pop
    neg exch neg exch
    2 array astore
} def

/vmul {                 % [x y] m >>> [x*m y*m]
    exch aload pop      % m x y
    2 index             % m x y m
    mul                 % m x y*m
    3 1 roll            % y*m m x
    mul                 % y*m x*m
    exch
    2 array astore
} def

/vrot {                 % [x y] r >>> [xr yr]
    dup cos             % [x y] r cos(r)
    exch sin            % [x y] cos(r) sin(r)
    3 -1 roll           % cos(r) sin(r) [x y]
    dup                 % cos(r) sin(r) [x y] [x y]
    aload pop           % cos(r) sin(r) [x y] x y
    3 index             % cos(r) sin(r) [x y] x y sin(r)
    neg                 % cos(r) sin(r) [x y] x y -sin(r)
    mul                 % cos(r) sin(r) [x y] x -y*sin(r)
    exch                % cos(r) sin(r) [x y] -y*sin(r) x
    4 index             % cos(r) sin(r) [x y] -y*sin(r) x cos(r)
    mul                 % cos(r) sin(r) [x y] -y*sin(r) x*cos(r)
    add                 % cos(r) sin(r) [x y] x*cos(r)-y*sin(r)  // the new X
    exch aload pop      % cos(r) sin(r) x*cos(r)-y*sin(r) x y
    5 -1 roll           % sin(r) x*cos(r)-y*sin(r) x y cos(r)
    mul                 % sin(r) x*cos(r)-y*sin(r) x y*cos(r)
    exch                % sin(r) x*cos(r)-y*sin(r) y*cos(r) x
    4 -1 roll           % x*cos(r)-y*sin(r) y*cos(r) x sin(r)
    mul                 % x*cos(r)y*sin(r) y*cos(r) x*sin(r)
    add                 % x*cos(r)-y*sin(r) x*sin(r)+y*cos(r)
    2 array astore
} def

/hmirror {
    aload pop
    neg
    2 array astore
} def


/vmirror {
    aload pop
    exch neg exch
    2 array astore
} def

/opposite {
    hmirror vmirror
} def

/midpoint {
    vadd
    .5 vmul
} def

%
%                     E------M------D
%                    /               \
%                   /                 \
%                  N                   L
%                 /                     \
%                /                       \
%               F            O            C
%                \                       /   E------M------D
%                 \        "blue"       /   /               \
%                  P                   K   /                 \
%                   \                 /   N                   L
%                    \               /   /                     \
%                     A------J------B   /                       \
%                                      F            O            C
%                     E------M------D   \                       /
%                    /               \   \       "green"       /
%                   /                 \   P                   K
%                  N                   L   \                 /
%                 /                     \   \               /
%                /                       \   A------J------B
%               F            O            C
%                \                       /
%                 \        "red"        /
%                  P                   K
%                   \                 /
%                    \               /
%                     A------J------B
%
%
%   O: (   0,     0)
%   A: (-1/2, -sq32)
%   B: ( 1/2, -sq32)
%   C: (   1,     0)
%   D: ( 1/2,  sq32)
%   E: (-1/2,  sq32)
%   F: (  -1,     0)
%

/half .5 def
/sq32 3 sqrt 2 div def

/O [ 0 0 ] def
/A [ half neg sq32 neg ] def
/B A vmirror def
/C [ 1 0 ] def
/D A opposite def
/E A hmirror def
/F C vmirror def

/J A B midpoint def
/K B C midpoint def
/L C D midpoint def
/M D E midpoint def
/N E F midpoint def
/P F A midpoint def

/red2blue {
    % add the vector AE
    E A vneg vadd vadd
} def

/red2green {
    % add the vector AC
    C A vneg vadd vadd
} def

/vrotate {
    1 dict begin
    /angle exch def
    mark exch
    {
        angle vrot
    } forall
    end
    counttomark
    array astore
    exch pop
} def

/vflip {
    mark exch
    {
        hmirror
    } forall
    counttomark
    array astore
    exch pop
} def


/cshow { dup stringwidth pop -2 div 0 rmoveto show } def

/apath {                        % hatarray strokeproc fillproc >>> -
    2 dict begin
    /fillproc exch def
    /strokeproc exch def
    gsave
        newpath
        dup 0 get aload pop moveto
        {
            aload pop lineto
        } forall
        closepath
        gsave fillproc grestore
        gsave strokeproc grestore
    grestore
    end
} def

/hat-upright [
    P
    O
    K
    C
    J red2green
    O red2green
    N red2green
    C red2blue
    L red2blue
    O red2blue
    J red2blue
    E
    F
] def

/hat-flipped hat-upright vflip def



gsave
    0 0 translate
    0 0 moveto (O) cshow
    hat-upright strk {} apath
grestore

gsave
    O red2green aload pop translate
    0 0 moveto (O) cshow
    hat-flipped 120 vrotate strk {} apath
grestore

gsave
    % O red2green aload pop translate
    0 3.5 translate
    0 0 moveto (O) cshow
    hat-flipped 240 vrotate strk {} apath
grestore



/hat1 {
    gsave
    .02 setlinewidth
    hat-upright apath
    grestore
} def

/hat2 {
    gsave
    .02 setlinewidth
    hat-flipped 120 vrotate apath
    grestore
} def





% 0 setgray

% hat1
% gsave
% /marker 0 def
% 1 0 0 setrgbcolor
% hat-upright
% {
%     aload pop moveto
%     (POKCjon....EF) marker 1 getinterval show
%     /marker marker 1 add def
% } forall
% grestore

% O red2green aload pop translate




% hat2

% gsave
% /marker 0 def
% 1 0 0 setrgbcolor
% hat-flipped 120 vrotate
% {
%     aload pop moveto
%     (POKCjon....EF) marker 1 getinterval cshow
%     /marker marker 1 add def
% } forall
% grestore

  showpage
